;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-advanced-reader.ss" "lang")((modname süde22) (read-case-sensitive #t) (teachpacks ((lib "image.rkt" "teachpack" "2htdp"))) (htdp-settings #(#t constructor repeating-decimal #t #t none #f ((lib "image.rkt" "teachpack" "2htdp")) #f)))
;ÖZGE YILGÜR
;ÖYKÜ ŞAMLI
;SUDE SÖKİN


;Creative Commens lisans
;CC2



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; bootstrapworld reactive (ish) racket versiyonu
(require 2htdp/universe)
(require 2htdp/image)

(define FRAME-RATE 12)


;vc
;x sayısı x komponent
;y sayısı y komponent
(define-struct vc (x y))


;+vc : vc,vc->vc
;iki vektörün toplamını hesaplar
(check-expect
 (+vc (make-vc 7 5) (make-vc 3 4))
 (make-vc 10 9))

(define (+vc v1 v2) (make-vc (+ (vc-x v1) (vc-x v2)) (+ (vc-y v1) (vc-y v2))))


; place-image/vc resim vc scene -> scene
; bir sahneye vectora göre bir imaj yerleştir
(check-expect
 (place-image/vc (circle 10 "solid" "yellow") (make-vc 5 10) (square 30 "solid" "red"))
 (place-image/align (circle 10 "solid" "yellow") 5 10 "left" "top" (square 30 "solid" "red")))

(define (place-image/vc im v sahne)
  (place-image/align im (vc-x v) (vc-y v) "left" "top"  sahne))

; place-line/vc vc vc color scene -> scene
; add line from v1 to v2 to scene
(check-expect
 (place-line/vc (make-vc 20 30) (make-vc 30 40) "black" (rectangle 200 100 "solid" "white"))
  (add-line (rectangle 200 100 "solid" "white") 20 30 30 40 "black"))

(define (place-line/vc v1 v2 renk sahne)
  (add-line sahne (vc-x v1) (vc-y v1) (vc-x v2) (vc-y v2) renk ))

; place-cisim cisim scene -> scene
; bir cisim kendi yer kordinatlarına göre sahneye yerleştir
(check-expect
 (place-cisim (make-cisim (circle 10 "solid" "yellow") (make-vc 10 10) (make-vc 99 99) (make-vc 99 99)) (square 100 "solid" "black"))
 (place-image/vc (circle 10 "solid" "yellow") (make-vc 10 10)  (square 100 "solid" "black")))

(define (place-cisim c sahne)
  (place-image/vc (cisim-imaj c) (cisim-yer c) sahne))


;cisim:obje
;imaj:resim
;yer:vc
;hız:vc
;ivme:vc
(define-struct cisim (imaj yer hız ivme))

(define OYUNCU (make-cisim (bitmap "oyuncu.jpg") (make-vc -10 285) (make-vc 0 0) (make-vc 0 0)))

(define HEDEF1  (make-cisim (bitmap "hedef1.png") (make-vc 50 50) (make-vc 0 2) (make-vc 0 0)))

(define HEDEF2 (make-cisim (bitmap "hedef2.png") (make-vc 70 70) (make-vc 0 2) (make-vc 0 0)))

(define TEHLİKE (make-cisim (bitmap "tehlike.png" ) (make-vc 90 90) (make-vc 0 2) (make-vc 0 0)))



;arkaplan->imaj
(define BACKGROUND (bitmap "arkaplan.JPG"))
(define BACKGROUND-SCENE
  (place-image/align BACKGROUND  0 0 "left" "top" (empty-scene (image-width BACKGROUND) (image-height BACKGROUND))))



;cisim-ilerleme cisim->cisim
;fizik kurallarına göre cisim 1 saniye ilerliyor
(check-expect
(cisim-ilerleme (make-cisim (rectangle 20 30 "solid" "blue")
                                (make-vc 1 1) (make-vc 2 3) (make-vc -1 -3)))
                    (make-cisim (rectangle 20 30 "solid" "blue")
                               (make-vc 3 4) (make-vc 1 0) (make-vc -1 -3)))

(define (cisim-ilerleme obje)(make-cisim
                                (cisim-imaj obje)
                                (+vc (cisim-yer obje) (cisim-hız obje))
                                (+vc (cisim-hız obje) (cisim-ivme obje))
                                (cisim-ivme obje)))


;dünya
;c:cisim
(define-struct dünya (oyuncu hedef1 hedef2 tehlike skor))

; oyun başlığı:oyununuzun adını buraya yazınız
(define BAŞLIK "SÜDE")
(define BAŞLIK-RENGİ "pink")
(define SKOR 100)

;dünya-ilerleme:dünya->dünya
;w:world
;cismin ilerlemiş halini çıkarır
(define (dünya-ilerleme w) (make-dünya (cisim-ilerleme (dünya-oyuncu w))
                           (cisim-ilerleme-random (cisim-ilerleme (dünya-hedef1 w)))
                           (cisim-ilerleme-random (cisim-ilerleme (dünya-hedef2 w)))
                           (cisim-ilerleme-random (cisim-ilerleme (dünya-tehlike w)))
                                           (dünya-skor w)
                                           ))
;yenidünya
(define BENİM-DÜNYAM (make-dünya HEDEF1 HEDEF2 OYUNCU TEHLİKE SKOR))


 ;dünya-çiz: dünya->sahne
 ;sahneye dünya çizer
(check-expect (dünya-çiz BENİM-DÜNYAM) (place-cisim (dünya-oyuncu BENİM-DÜNYAM)
                                       (place-cisim (dünya-hedef1 BENİM-DÜNYAM)
                                       (place-cisim (dünya-hedef2 BENİM-DÜNYAM)
                                       (place-cisim (dünya-tehlike BENİM-DÜNYAM)
                                       (place-image (text (string-append "SKOR: " (number->string (dünya-skor BENİM-DÜNYAM))) 20 "blue")
                                                    250 20
                                                    BACKGROUND))))))

                                                    

  (define (dünya-çiz w) (place-cisim (dünya-oyuncu w)
                        (place-cisim (dünya-hedef1 w)
                        (place-cisim (dünya-hedef2 w)
                        (place-cisim (dünya-tehlike w)
                        (place-image (text (string-append "SKOR: " (number->string (dünya-skor w))) 20 "blue")
                                     250 20 
                                     BACKGROUND))))))

  

  (define (dünya-fare w x y m) w)

;yaradılış
(define yaradılış (make-dünya OYUNCU HEDEF2 HEDEF1 TEHLİKE SKOR ))

; vektör testleri
(define v1 (make-vc 150 150))
(define v2 (make-vc 120 30))
(define origin (make-vc 0 0))


; vektör toplam gösterisi
(place-line/vc origin (+vc v1 v2) "green"
                                     (place-line/vc origin v1 "pink"
                                                    (place-line/vc v1 (+vc v1 v2)  "yellow" (rectangle 300 225 "solid" "black"))))


;dünya-tuş:dünya tuş--> dünya
;dünya-tuş fonksiyonu bir dünya ve tuş alarak dünya yaratır
;right, left, up tuşları ile hareketi sağlar

(check-expect (dünya-tuş BENİM-DÜNYAM "a") (make-dünya (make-cisim
                                      (cisim-imaj OYUNCU)
                                      (make-vc (+ (vc-x (cisim-yer (dünya-oyuncu BENİM-DÜNYAM)))
                                               (cond
                                                 ((string=? "a" "right") 30)
                                                 ((string=? "a" "left") -30)
                                                 ((string=? "a" "up") 30)
                                                 (else 0)))
                                              (vc-y (cisim-yer(dünya-oyuncu BENİM-DÜNYAM))))
                                      (cisim-hız (dünya-oyuncu BENİM-DÜNYAM))
                                      (cisim-ivme (dünya-oyuncu BENİM-DÜNYAM)))
  (dünya-hedef1 BENİM-DÜNYAM)
  (dünya-hedef2 BENİM-DÜNYAM)
  (dünya-tehlike BENİM-DÜNYAM)
  (dünya-skor BENİM-DÜNYAM)))


(define (dünya-tuş w t ) (make-dünya (make-cisim
                                      (cisim-imaj OYUNCU)
                                      (make-vc (+ (vc-x (cisim-yer (dünya-oyuncu w)))
                                               (cond
                                                 ((string=? t "right") 30)
                                                 ((string=? t "left") -30)
                                                 ((string=? t "up") 30)
                                                 (else 0)))
                                              (vc-y (cisim-yer(dünya-oyuncu w))))
                                      (cisim-hız (dünya-oyuncu w))
                                      (cisim-ivme (dünya-oyuncu w)))
  (dünya-hedef1 w)
  (dünya-hedef2 w)
  (dünya-tehlike w)
  (dünya-skor w)))

;oyuncu-yer-kontrol: vc t -> vc

;(check-expect (oyuncu-yer-kontrol (make-vc 5 10) 8)
  ;            (make-vc (oyuncu-yer-kontrol (5 8)10)))
              
 
(define (oyuncu-yer-kontrol v t)
  (make-vc (oyuncu-yer-kontrol (vc-x v)t)(vc-y v)))



;cisim-ekranda-mı?:cisim--> mantıksal
(check-expect (cisim-ekranda-mı? OYUNCU)
              (< (vc-y (cisim-yer OYUNCU))
                 (image-height BACKGROUND)))
                      
(define (cisim-ekranda-mı? c)
  (< (vc-y (cisim-yer c))
     (image-height BACKGROUND)))


;random-cismim:cisim--> cisim
;random cisim oluşturur

;(check-expect (random-cismim OYUNCU)
;              (make-cisim (cisim-imaj OYUNCU)
;              (make-vc (random 20 (- (image-width BACKGROUND) 10)) 0)
;              (cisim-hız OYUNCU)
;              (cisim-ivme OYUNCU)))


(define (random-cismim c)
  (make-cisim (cisim-imaj c)
              (make-vc (random 20 (- (image-width BACKGROUND) 10)) 0)
              (cisim-hız c)
              (cisim-ivme c)))

                          
(define (cisim-ilerleme-random c)
  (cond
    ((cisim-ekranda-mı? c)(cisim-ilerleme c))
    (else (random-cismim c))))



;-vc:vc vc -> vc
;verilen iki vektorun farkini alir
(define (-vc v1 v2)
  (make-vc (- (vc-x v1) (vc-x v2))
           (- (vc-y v1) (vc-y v2))))


;mag-vc:vc--> sayı
;vc vektörün uzunluğunu hesaplamak
(check-expect (mag-vc (make-vc 3 4))5)

(define (mag-vc v)
  (sqrt (+ (sqr (vc-x v))
           (sqr (vc-y v)))))

;çarpıştı-mı?: cisim cisim -> mantiksal
(check-expect (çarpıştı-mı? OYUNCU TEHLİKE)
              (< (mag-vc (-vc (cisim-yer OYUNCU)
                              (cisim-yer TEHLİKE)))
                 (+ (image-height (cisim-imaj OYUNCU))
                    (image-height (cisim-imaj TEHLİKE)))))

(define (çarpıştı-mı? c1 c2)
  (<= (mag-vc (-vc (cisim-yer c1)
                  (cisim-yer c2)))
     (/ (+ (image-height (cisim-imaj c1))
        (image-height (cisim-imaj c2))) 2)))

;hedef1-çarpışma-kontrol: dünya -> dünya

(check-expect (hedef1-çarpışma-kontrol BENİM-DÜNYAM)
  (cond
    [(çarpıştı-mı? (dünya-oyuncu BENİM-DÜNYAM) (dünya-hedef1 BENİM-DÜNYAM))
     (make-dünya (dünya-oyuncu BENİM-DÜNYAM) (dünya-hedef1 BENİM-DÜNYAM) (dünya-hedef2 BENİM-DÜNYAM) (dünya-tehlike BENİM-DÜNYAM)
                 (+ (dünya-skor BENİM-DÜNYAM) 20))]
    [else BENİM-DÜNYAM]))

(define (hedef1-çarpışma-kontrol w)
  (cond
    ((çarpıştı-mı? (dünya-oyuncu w) (dünya-hedef1 w))
     (make-dünya (dünya-oyuncu w) (make-cisim
                                   (cisim-imaj (dünya-hedef1 w))
                                   (make-vc (random 20 (- (image-width BACKGROUND) 20)) -50)
                                   (cisim-hız (dünya-hedef1 w))
                                   (cisim-ivme (dünya-hedef1 w)))
                 (dünya-hedef2 w) (dünya-tehlike w) (+ (dünya-skor w) 20)))
    (else w)))


;hedef2-çarpışma-kontrol: dünya -> dünya

(check-expect (hedef2-çarpışma-kontrol BENİM-DÜNYAM)
  (cond
    [(çarpıştı-mı? (dünya-oyuncu BENİM-DÜNYAM) (dünya-hedef2 BENİM-DÜNYAM))
     (make-dünya (dünya-oyuncu BENİM-DÜNYAM) (dünya-hedef1 BENİM-DÜNYAM) (dünya-hedef2 BENİM-DÜNYAM) (dünya-tehlike BENİM-DÜNYAM)
                 (+ (dünya-skor BENİM-DÜNYAM) 50))]
    [else BENİM-DÜNYAM]))


(define (hedef2-çarpışma-kontrol w)
  (cond
    [(çarpıştı-mı? (dünya-oyuncu w) (dünya-hedef2 w))
     (make-dünya (dünya-oyuncu w) (dünya-hedef1 w) (make-cisim
                                                         (cisim-imaj (dünya-hedef2 w))
                                                         (make-vc (random 20 (- (image-width BACKGROUND) 20)) -50)
                                                         (cisim-hız (dünya-hedef2 w))
                                                         (cisim-ivme (dünya-hedef2 w)))
                                                         (dünya-tehlike w)
                 (+ (dünya-skor w) 50))]
    [else w]))

;tehlike-çarpışma-kontrol: dünya -> dünya

(check-expect (tehlike-çarpışma-kontrol BENİM-DÜNYAM)
  (cond
    [(çarpıştı-mı? (dünya-oyuncu BENİM-DÜNYAM) (dünya-tehlike BENİM-DÜNYAM))
     (make-dünya (dünya-oyuncu BENİM-DÜNYAM) (dünya-hedef1 BENİM-DÜNYAM) (dünya-hedef2 BENİM-DÜNYAM) (dünya-tehlike BENİM-DÜNYAM)
                 (- (dünya-skor BENİM-DÜNYAM) 50))]
    [else BENİM-DÜNYAM]))


(define (tehlike-çarpışma-kontrol w)
  (cond
    [(çarpıştı-mı? (dünya-oyuncu w) (dünya-tehlike w))
     (make-dünya (dünya-oyuncu w) (dünya-hedef1 w) (dünya-hedef2 w) (make-cisim
                                                                     (cisim-imaj (dünya-tehlike w))
                                                                      (make-vc (random 20 (- (image-width BACKGROUND) 20)) -50)
                                                                      (cisim-hız (dünya-tehlike w))
                                                                      (cisim-ivme (dünya-tehlike w)))
                 (- (dünya-skor w) 50))]
    [else w]))


;dünya-kontrol: dünya -> dünya
(check-expect (dünya-kontrol BENİM-DÜNYAM)
 (tehlike-çarpışma-kontrol (hedef2-çarpışma-kontrol (hedef1-çarpışma-kontrol (dünya-ilerleme BENİM-DÜNYAM)))))
    
(define (dünya-kontrol w)
 (tehlike-çarpışma-kontrol (hedef2-çarpışma-kontrol (hedef1-çarpışma-kontrol (dünya-ilerleme w)))))
    

(big-bang yaradılış
  (on-tick dünya-kontrol (/ 1.0 FRAME-RATE))
  (on-draw dünya-çiz)
  (on-key dünya-tuş)
  (on-mouse dünya-fare))


  
  